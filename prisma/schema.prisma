// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String
  password String
  createdAt             DateTime @default(now())
  updatedAt             DateTime  @updatedAt @default(now())

  Manager Manager[]
  Employee Employee[]
  Products Product[]
  Orders Order[]
  CurrentLocation CurrentLocation[]
  LiveLocation LiveLocation[]
  Notification Notification[]
  Journey Journey[]
}


model Bakery {
  id          Int        @id @default(autoincrement())
  name        String
  managerId   Int       @unique
  createdAt             DateTime @default(now())
  updatedAt             DateTime  @updatedAt @default(now())
  latitude    Decimal?
  longitude    Decimal?

  Products    Product[]
  Orders    Order[]
  Manager     Manager   @relation(fields: [managerId], references: [id])
  Employee    Employee[]
}

model Manager {
  id        Int     @id @default(autoincrement())
  userId    Int
  Bakery    Bakery?  
  createdAt             DateTime @default(now())
  updatedAt             DateTime  @updatedAt @default(now())

  user      User    @relation(fields: [userId], references: [id])
}

model Employee {
  id        Int     @id @default(autoincrement())
  userId    Int
  bakeryId  Int?   
  createdAt             DateTime @default(now())
  updatedAt             DateTime  @updatedAt @default(now())

  Bakery    Bakery?  @relation(fields: [bakeryId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model Product {
    id        Int     @id @default(autoincrement())
    name      String 
    price      Decimal
    bakeryId   Int?
    userId   Int
    stock     Int  @default(0)
    sold      Int @default(0)
    createdAt             DateTime @default(now())
    updatedAt             DateTime  @updatedAt @default(now())

    Bakery    Bakery?  @relation(fields: [bakeryId], references: [id])
    CreatedBy      User    @relation(fields: [userId], references: [id])
    Orders  Order[]
}

model Order {
    id        Int     @id @default(autoincrement())
    name      String 
    price      Decimal
    bakeryId   Int?
    seller   Int
    sold      Int @default(0)
    productId Int @default(1)
    createdAt             DateTime @default(now())
      latitude    Decimal?
  longitude    Decimal?

    Bakery    Bakery?  @relation(fields: [bakeryId], references: [id])
    Seller      User    @relation(fields: [seller], references: [id])
    Product      Product    @relation(fields: [productId], references: [id])
}


model Notification{
  id        Int     @id @default(autoincrement())
  title    String
  description    String
  isRead Boolean @default(false)
  userid Int
    updatedAt             DateTime  @updatedAt @default(now())
  User User    @relation(fields: [userid], references: [id])
}

model CurrentLocation{
  id        Int     @id @default(autoincrement())
  latitude    Decimal
  longitude    Decimal
  name   String
  userid Int
  User User    @relation(fields: [userid], references: [id])
}

model LiveLocation{
  id        Int     @id @default(autoincrement())
  latitude    Decimal
  longitude    Decimal
  userid Int
  User User    @relation(fields: [userid], references: [id])
}

model Journey{
  id              Int     @id @default(autoincrement())
  route           Json 
  userid          Int
  User            User    @relation(fields: [userid], references: [id])
  endAt           DateTime?
  startedAt       DateTime  @updatedAt @default(now())
  orderInsights   Json
}

